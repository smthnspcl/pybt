

class Exploit(object):
    manufacturers = {}

    def __init__(self):
        pass

    @staticmethod
    def prepare_address(address):
        if ':' not in address:
            a = ""
            i = 0
            while i < len(address) - 1:
                a += address[i]
                i += 1
                a += address[i]
                i += 1
                a += ':'
            address = a[:17]
        if not address.isupper():
            address = address.upper()
        return address

    def is_exploitable(self, address):
        for m in self.manufacturers.keys():
            if address[:17] in self.manufacturers[m]:
                return m
        return None

    def exploit(self, address):
        address = self.prepare_address(address)
        m = self.is_exploitable(address)
        if m is None:
            return False
        print(address, "belongs to", m, "and is exploitable")
        # todo
        return True


def test():
    # should output the first mac 4 times
    addrs = ["AB:CD:EF:12:34:56", "abcdef123456", "ABCDEF123456", "ab:cd:ef:12:34:56"]
    for addr in addrs:
        print(Exploit.prepare_address(addr))


if __name__ == '__main__':
    test()
